#============================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: Build OpenWrt on Debian 12
#============================================================================================

name: 通用设备编译固件

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - lede-master
          - immortalwrt-master
          - Lienol-master

env:
  FEEDS_CONF: config/${{ inputs.source_branch }}/feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/config
  DIY_P1_SH: config/${{ inputs.source_branch }}/diy-part1.sh
  DIY_P2_SH: config/${{ inputs.source_branch }}/diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: debian-12
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialization environment
        id: init
        shell: bash
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -e
          # 安装基础依赖
          sudo apt-get -y update
          sudo apt-get -y install curl wget sudo git ca-certificates gnupg lsb-release build-essential \
            clang flex bison g++ gawk gcc-multilib g++-multilib gettext \
            libncurses5-dev libssl-dev python3-distutils python3-dev python3-setuptools \
            rsync unzip zlib1g-dev file wget swig \
            libelf-dev ecj fastjar java-propose-classpath libncursesw5-dev libreadline-dev libglib2.0-dev \
            libboost-all-dev
          
          # 清理环境
          sudo apt-get -y autoremove --purge
          sudo apt-get clean
          
          # 准备工作目录
          sudo mkdir -p /workdir
          sudo chown $(id -u):$(id -g) /workdir
          
          # 设置时区
          sudo timedatectl set-timezone "${TZ}"
          
          # 设置 Python 链接
          sudo ln -sf /usr/bin/python3 /usr/bin/python
          sudo ln -sf /usr/bin/python3 /usr/bin/python3-config
          
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clone source code [ ${{ inputs.source_branch }} ]
        id: codes
        shell: bash
        working-directory: /workdir
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          set -e
          if [[ "${{ inputs.source_branch }}" == *"openwrt"* ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="official"
          elif [[ "${{ inputs.source_branch }}" == *"lede"* ]]; then
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
              TAGS_NAME="lede"
          elif [[ "${{ inputs.source_branch }}" == *"immortalwrt"* ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          elif [[ "${{ inputs.source_branch }}" == *"Lienol"* ]]; then
              REPO_URL="https://github.com/Lienol/openwrt"
              REPO_BRANCH="22.03"
              TAGS_NAME="Lienol"
          else
              echo "Unknown source code repository."
              exit 1
          fi
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt
          echo "build_tag=OpenWrt_${TAGS_NAME}_${{ inputs.source_branch }}_$(date +'%Y.%m')" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Load custom feeds
        shell: bash
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      - name: Update feeds
        shell: bash
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: Install feeds
        shell: bash
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: Load custom configuration
        shell: bash
        run: |
          [[ -d "files" ]] && mv -f files openwrt/files
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
          chmod +x ${DIY_P2_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      - name: Download package
        id: package
        shell: bash
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the OpenWrt
        id: compile
        shell: bash
        run: |
          cd openwrt/
          export FORCE_UNSAFE_CONFIGURE=1
          echo -e "$(nproc) thread compile"
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Check space usage
        if: (!cancelled())
        shell: bash
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@v3
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        shell: bash
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload firmware directory
        uses: actions/upload-artifact@v3
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        shell: bash
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
          touch release.txt
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### OpenWrt Image information
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: password
            - Default WIFI name: OpenWrt
            - Default WIFI password: none
            ### Install to EMMC
            - Login to OpenWrt → System → Amlogic Service → Install OpenWrt
            ### OpenWrt Image Verification
            - sha256sum
